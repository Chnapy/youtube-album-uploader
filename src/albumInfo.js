var fs = require('fs');var id3 = require('id3js');var path = require('path');var ffmpeg = require('fluent-ffmpeg');var fileExists = require('./fileExists');var filterFileList = require('./filterFileList');/** * Tries to get album info based on file. * * @param {string} path (eg. /path/to/music) * @param {string} coverpath * @param {boolean | undefined} useDir */module.exports = function (path, coverpath, useDir) {    return new Promise(function (resolve, reject) {        var callback = function (err, data) {            if (err) {                reject(err);            } else {                resolve(data);            }        };        //First file of a directory        if (useDir) {            filterFileList(path, 'mp3', function (err, data) {                if (err) {                    callback(err);                    return;                }                if (data.length > 0) {                    getInfo(data[0], coverpath, data, callback);                }            });        }        //A single file        else {            getInfo(path, coverpath, callback);        }    });};/** * Get all infos about a music file with his path and his cover path. * * * @param {string} filepath * @param {string} coverpath * @param {string[] | function} data list of the tracks path (including filepath) * @param {function | undefined} callback */function getInfo(filepath, coverpath, data, callback) {    if (typeof data === 'function') {        callback = data;        data = [filepath];    }    //try to get info mp3    id3({file: path.join(filepath), type: id3.OPEN_LOCAL}, function (err, tags) {        if (err) {            callback(err, null);            return;        }        var ffProbeIndex = 0;        var albumData = {};        albumData.artist = tags.artist;        albumData.album = tags.album;        albumData.albumArt = path.join(coverpath);        if (!fileExists(albumData.albumArt)) {            callback('coverpath doesn\'t exist ' + coverpath);            return;        }        albumData.tracks = [];        data.forEach(function (filename, index, array) {            ffmpeg.ffprobe(filename, function (err, metadata) {                ffProbeIndex++;                if (err) {                    console.error(err);                    if (ffProbeIndex >= array.length) {                        callback(err, albumData);                    }                    return;                }                var track = {                    title: '',                    path: path.join(filename),                    trackNumber: 0,                    duration: metadata.format.duration                };                var ftags = metadata.format.tags;                if (ftags) {                    if (ftags.title) {                        track.title = ftags.title;                    }                    if (ftags.track) {                        //track could be number or number/total                        if (ftags.track.indexOf('/') > -1) {                            track.trackNumber = parseInt(ftags.track.split('/')[0], 10);                        } else {                            track.trackNumber = parseInt(ftags.track, 10);                        }                    }                }                albumData.tracks.push(track);                if (ffProbeIndex >= array.length) {                    albumData.tracks.sort(function (a, b) {                        if (b.trackNumber > a.trackNumber) {                            return -1;                        }                        if (b.trackNumber < a.trackNumber) {                            return 1;                        }                        return 0;                    });                    callback(err, albumData);                }            });        });    });}